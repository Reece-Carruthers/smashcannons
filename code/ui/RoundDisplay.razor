@using System;
@using Sandbox;
@using Sandbox.UI;

@attribute [StyleSheet( "RoundDisplay.razor.scss" )]
@inherits Panel

@{
	// TODO: Refactor this horrible code
	var lobbyState = StateSystem.Active as LobbyState;
	var gameState = StateSystem.Active as GameState;
	var finalState = StateSystem.Active as FinalState;
	var activePlayers = 0;

	if ( lobbyState.IsValid() )
	{
		activePlayers = lobbyState.ActiveRunnerPlayers.Count + lobbyState.ActiveCannonPlayers.Count;
	}
	else if ( gameState.IsValid() )
	{
		activePlayers = gameState.ActiveRunnerPlayers.Count + gameState.ActiveCannonPlayers.Count;
	}
	else if ( finalState.IsValid() )

	{
		activePlayers = finalState.ActiveRunnerPlayers.Count + finalState.ActiveCannonPlayers.Count;
	}
	else
	{
		return;
	}

	if ( activePlayers == 0 ) return;
}

<root>
	<div class="container">
		<label class="time">@GetTimeLeftString()</label>
	</div>

	<div class="container-status">
		<label class="status">@GetRoundName()</label>
	</div>

	<div class="container-alive-runners">
		<label class="alive-runners">Runners Alive: @GetAliveRunnersCount()</label>
	</div>

	@if ( IsCannonWin() )
	{
		<div class="container-win">
			<label class="win-message">Cannoniers win!</label>
		</div>
	}
	else if ( IsRunnersWin() )
	{
		<div class="container-win">
			<label class="win-message">Runners win!</label>
		</div>
	}
</root>

@code
{
	[Property] public string GameLobby = "Waiting for Players . . .";
	public SmashRunnerMovement LocalPlayer { get; set; }

	protected override int BuildHash()
	{
		var lobbyState = StateSystem.Active as LobbyState;
		var gameState = StateSystem.Active as GameState;
		var finalState = StateSystem.Active as FinalState;

		return !gameState.IsValid() && !finalState.IsValid() && !lobbyState.IsValid() ? 0 : HashCode.Combine( GetTimeLeftString(), GetAliveRunnersCount() );
	}

	private string GetTimeLeftString()
	{
		var state = StateSystem.Active;
		if ( !state.IsValid() ) return string.Empty;

		var timeLeft = MathF.Max( state.TimeLeft, 0 );
		var t = TimeSpan.FromSeconds( timeLeft );
		return $"{t.Minutes}:{t.Seconds:D2}";
	}

	private string GetRoundName()
	{
		var state = StateSystem.Active;
		return !state.IsValid() ? string.Empty : state.Name;
		// return LocalPlayer.LifeState == LifeState.Alive ? "Survive!" : "You Are Dead!";
	}

	private List<SmashRunnerMovement> FetchAliveRunnerPlayers()
	{
		var lobbyState = StateSystem.Active as LobbyState;
		var gameState = StateSystem.Active as GameState;
		var finalState = StateSystem.Active as FinalState;

		if ( lobbyState.IsValid() )
		{
			return lobbyState.ActiveRunnerPlayers;
		}

		if ( gameState.IsValid() )
		{
			return gameState.ActiveRunnerPlayers;
		}

		return finalState.IsValid() ? finalState.ActiveRunnerPlayers : new List<SmashRunnerMovement>();
	}


	private List<SmashRunnerMovement> FetchAliveCannonPlayers()
	{
		var lobbyState = StateSystem.Active as LobbyState;
		var gameState = StateSystem.Active as GameState;
		var finalState = StateSystem.Active as FinalState;

		if ( lobbyState.IsValid() )
		{
			return lobbyState.ActiveCannonPlayers;
		}

		if ( gameState.IsValid() )
		{
			return gameState.ActiveCannonPlayers;
		}

		return finalState.IsValid() ? finalState.ActiveCannonPlayers : new List<SmashRunnerMovement>();
	}

	private int GetAliveRunnersCount()
	{
		return FetchAliveRunnerPlayers().Count;
	}

	private bool IsCannonWin()
	{
		var state = StateSystem.Active;
		if ( state is GameState or FinalState )
		{
			var aliveRunners = FetchAliveRunnerPlayers().Count;

			return aliveRunners == 0;
		}

		return false;
	}

	private bool IsRunnersWin()
	{
		var state = StateSystem.Active;
		if ( state is GameState or FinalState )
		{
			var aliveCannoniers = FetchAliveCannonPlayers().Count;

			return aliveCannoniers == 0;
		}

		return false;
	}
}
